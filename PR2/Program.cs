using System;
using System.Collections.Generic;
using System.Linq;

namespace ShopInventory
{
    public enum ProductCategory
    {
        Electronics,
        Clothing,
        Food,
        Books,
        Sports
    }

    public class Product
    {
        public string Code { get; private set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
        public bool InStock => Quantity > 0;
        public ProductCategory Category { get; set; }

        public Product(string name, decimal price, int quantity, ProductCategory category, string code)
        {
            if (string.IsNullOrWhiteSpace(name)) throw new ArgumentException("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            if (price < 0) throw new ArgumentException("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π");
            if (quantity < 0) throw new ArgumentException("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º");

            Name = name;
            Price = price;
            Quantity = quantity;
            Category = category;
            Code = code;
        }

        public override string ToString()
        {
            return $"–ö–æ–¥: {Code}, –ù–∞–∑–≤–∞–Ω–∏–µ: {Name}, –¶–µ–Ω–∞: {Price:C}, " +
                   $"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {Quantity}, –í –Ω–∞–ª–∏—á–∏–∏: {(InStock ? "–î–∞" : "–ù–µ—Ç")}, " +
                   $"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {Category}";
        }
    }

    public class SaleRecord
    {
        public string ProductCode { get; set; }
        public string ProductName { get; set; }
        public int Quantity { get; set; }
        public decimal TotalPrice { get; set; }
        public DateTime SaleDate { get; set; }

        public SaleRecord(string productCode, string productName, int quantity, decimal totalPrice)
        {
            ProductCode = productCode;
            ProductName = productName;
            Quantity = quantity;
            TotalPrice = totalPrice;
            SaleDate = DateTime.Now;
        }

        public override string ToString()
        {
            return $"{SaleDate:yyyy-MM-dd HH:mm} - {ProductName} ({ProductCode}), " +
                   $"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {Quantity}, –°—É–º–º–∞: {TotalPrice:C}";
        }
    }

    public class Shop
    {
        private List<Product> products;
        private Stack<SaleRecord> salesHistory;
        private List<SaleRecord> salesReport;
        private int productCounter;

        public Shop()
        {
            products = new List<Product>();
            salesHistory = new Stack<SaleRecord>();
            salesReport = new List<SaleRecord>();
            productCounter = 1;
            InitializeTestData();
        }

        private void InitializeTestData()
        {
            AddProduct("–ù–æ—É—Ç–±—É–∫", 50000, 10, ProductCategory.Electronics);
            AddProduct("–§—É—Ç–±–æ–ª–∫–∞", 1500, 50, ProductCategory.Clothing);
            AddProduct("–•–ª–µ–±", 50, 100, ProductCategory.Food);
            AddProduct("–ö–Ω–∏–≥–∞ –ø–æ C#", 1200, 20, ProductCategory.Books);
            AddProduct("–ú—è—á", 2500, 15, ProductCategory.Sports);
        }

        private string GenerateProductCode() => $"1{productCounter++:D6}";

        public void AddProduct(string name, decimal price, int quantity, ProductCategory category)
        {
            try
            {
                var product = new Product(name, price, quantity, category, GenerateProductCode());
                products.Add(product);
                Console.WriteLine($" –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {product}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($" –û—à–∏–±–∫–∞: {ex.Message}");
            }
        }

        public void RemoveProduct(string code)
        {
            var product = products.FirstOrDefault(p => p.Code == code);
            if (product != null)
            {
                products.Remove(product);
                Console.WriteLine($" –¢–æ–≤–∞—Ä —Å –∫–æ–¥–æ–º {code} —É–¥–∞–ª–µ–Ω");
            }
            else
            {
                Console.WriteLine($" –¢–æ–≤–∞—Ä —Å –∫–æ–¥–æ–º {code} –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }
        }
        public void OrderSupply(string code, int quantity)
        {
            if (quantity <= 0)
            {
                Console.WriteLine(" –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º");
                return;
            }

            var product = products.FirstOrDefault(p => p.Code == code);
            if (product != null)
            {
                product.Quantity += quantity;
                Console.WriteLine($" –ü–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞–Ω–∞. –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.Quantity}");
            }
            else
            {
                Console.WriteLine($" –¢–æ–≤–∞—Ä —Å –∫–æ–¥–æ–º {code} –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }
        }

        public void SellProduct(string code, int quantity)
        {
            if (quantity <= 0)
            {
                Console.WriteLine(" –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º");
                return;
            }

            var product = products.FirstOrDefault(p => p.Code == code);
            if (product == null)
            {
                Console.WriteLine($" –¢–æ–≤–∞—Ä —Å –∫–æ–¥–æ–º {code} –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            if (product.Quantity < quantity)
            {
                Console.WriteLine($" –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞. –î–æ—Å—Ç—É–ø–Ω–æ: {product.Quantity}");
                return;
            }

            product.Quantity -= quantity;
            decimal totalPrice = product.Price * quantity;

            var saleRecord = new SaleRecord(product.Code, product.Name, quantity, totalPrice);
            salesHistory.Push(saleRecord);
            salesReport.Add(saleRecord);

            Console.WriteLine($" –ü—Ä–æ–¥–∞–∂–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞:");
            Console.WriteLine($"   –¢–æ–≤–∞—Ä: {product.Name}");
            Console.WriteLine($"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.");
            Console.WriteLine($"   –°—É–º–º–∞: {totalPrice:C}");
            Console.WriteLine($"   –û—Å—Ç–∞—Ç–æ–∫: {product.Quantity} —à—Ç.");
        }

        public void SearchProducts(string searchTerm)
        {
            var results = products.Where(p =>
                p.Code.Contains(searchTerm) ||
                p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                p.Category.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();

            if (results.Any())
            {
                Console.WriteLine($" –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {results.Count}");
                foreach (var product in results)
                {
                    Console.WriteLine($"   {product}");
                }
            }
            else
            {
                Console.WriteLine(" –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            }
        }

        public void ShowSalesHistory()
        {
            if (!salesHistory.Any())
            {
                Console.WriteLine(" –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂ –ø—É—Å—Ç–∞");
                return;
            }

            Console.WriteLine(" –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂:");
            foreach (var sale in salesHistory.Reverse())
            {
                Console.WriteLine($"   {sale}");
            }
        }

        public void UndoLastSale()
        {
            if (!salesHistory.Any())
            {
                Console.WriteLine(" –ù–µ—Ç –ø—Ä–æ–¥–∞–∂ –¥–ª—è –æ—Ç–º–µ–Ω—ã");
                return;
            }

            var lastSale = salesHistory.Pop();
            var product = products.FirstOrDefault(p => p.Code == lastSale.ProductCode);

            if (product != null)
            {
                product.Quantity += lastSale.Quantity;
                salesReport.Remove(lastSale);
                Console.WriteLine($" –ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: {lastSale.ProductName}");
                Console.WriteLine($"   –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: {lastSale.Quantity} —à—Ç.");
            }
            else
            {
                Console.WriteLine(" –¢–æ–≤–∞—Ä –∏–∑ –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ");
            }
        }

        public void GenerateSalesReport()
        {
            if (!salesReport.Any())
            {
                Console.WriteLine("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö");
                return;
            }
            Console.WriteLine("–û–¢–ß–ï–¢ –û –ü–†–û–î–ê–ñ–ê–•:");
            Console.WriteLine("====================");

            decimal totalRevenue = 0;
            int totalItemsSold = 0;

            foreach (var sale in salesReport)
            {
                Console.WriteLine($"   {sale}");
                totalRevenue += sale.TotalPrice;
                totalItemsSold += sale.Quantity;
            }

            Console.WriteLine("====================");
            Console.WriteLine($"   –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {salesReport.Count}");
            Console.WriteLine($"   –¢–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–Ω–æ: {totalItemsSold} —à—Ç.");
            Console.WriteLine($"   –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {totalRevenue:C}");
        }

        public void ShowAllProducts()
        {
            if (!products.Any())
            {
                Console.WriteLine(" –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç");
                return;
            }

            Console.WriteLine(" –í–°–ï –¢–û–í–ê–†–´:");
            foreach (var product in products)
            {
                Console.WriteLine($"   {product}");
            }
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("üõí –°–ò–°–¢–ï–ú–ê –£–ß–ï–¢–ê –¢–û–í–ê–†–û–í");
            Shop shop = new Shop();

            while (true)
            {
                Console.WriteLine("\n=== –ú–ï–ù–Æ ===");
                Console.WriteLine("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã");
                Console.WriteLine("2. –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä");
                Console.WriteLine("3. –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä");
                Console.WriteLine("4. –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É");
                Console.WriteLine("5. –ü—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä");
                Console.WriteLine("6. –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤");
                Console.WriteLine("7. –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂");
                Console.WriteLine("8. –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–æ–¥–∞–∂—É");
                Console.WriteLine("9. –û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö");
                Console.WriteLine("0. –í—ã—Ö–æ–¥");
                Console.Write("–í—ã–±–µ—Ä–∏—Ç–µ: ");

                switch (Console.ReadLine())
                {
                    case "1": shop.ShowAllProducts(); break;
                    case "2": AddProductMenu(shop); break;
                    case "3": RemoveProductMenu(shop); break;
                    case "4": OrderSupplyMenu(shop); break;
                    case "5": SellProductMenu(shop); break;
                    case "6": SearchProductsMenu(shop); break;
                    case "7": shop.ShowSalesHistory(); break;
                    case "8": shop.UndoLastSale(); break;
                    case "9": shop.GenerateSalesReport(); break;
                    case "0": Console.WriteLine(" –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"); return;
                    default: Console.WriteLine("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"); break;
                }
            }
        }

        static void AddProductMenu(Shop shop)
        {
            Console.Write("–ù–∞–∑–≤–∞–Ω–∏–µ: ");
            string name = Console.ReadLine();

            Console.Write("–¶–µ–Ω–∞: ");
            if (!decimal.TryParse(Console.ReadLine(), out decimal price) || price < 0)
            {
                Console.WriteLine(" –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞"); return;
            }

            Console.Write("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ");
            if (!int.TryParse(Console.ReadLine(), out int quantity) || quantity < 0)
            {
                Console.WriteLine(" –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"); return;
            }

            Console.WriteLine("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: 0-Electronics, 1-Clothing, 2-Food, 3-Books, 4-Sports");
            Console.Write("–ö–∞—Ç–µ–≥–æ—Ä–∏—è (0-4): ");
            if (!Enum.TryParse(Console.ReadLine(), out ProductCategory category) || !Enum.IsDefined(typeof(ProductCategory), category))
            {
                Console.WriteLine(" –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"); return;
            }

            shop.AddProduct(name, price, quantity, category);
        }

        static void RemoveProductMenu(Shop shop)
        {
            Console.Write("–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞: ");
            shop.RemoveProduct(Console.ReadLine());
        }
        static void OrderSupplyMenu(Shop shop)
        {
            Console.Write("–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞: ");
            string code = Console.ReadLine();

            Console.Write("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ");
            if (!int.TryParse(Console.ReadLine(), out int quantity) || quantity <= 0)
            {
                Console.WriteLine(" –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"); return;
            }

            shop.OrderSupply(code, quantity);
        }

        static void SellProductMenu(Shop shop)
        {
            Console.Write("–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞: ");
            string code = Console.ReadLine();

            Console.Write("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ");
            if (!int.TryParse(Console.ReadLine(), out int quantity) || quantity <= 0)
            {
                Console.WriteLine(" –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"); return;
            }

            shop.SellProduct(code, quantity);
        }

        static void SearchProductsMenu(Shop shop)
        {
            Console.Write("–ü–æ–∏—Å–∫ (–∫–æ–¥/–Ω–∞–∑–≤–∞–Ω–∏–µ/–∫–∞—Ç–µ–≥–æ—Ä–∏—è): ");
            string term = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(term))
            {
                Console.WriteLine(" –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"); return;
            }
            shop.SearchProducts(term);
        }
    }
}Ôªø
